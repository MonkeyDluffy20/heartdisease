# -*- coding: utf-8 -*-
"""HeartDiseaseModel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9-w3AYhfKstWObqF8dywXMwKii491V1

# **Predicting Heart Disease using Logistic Regression**

#Import Necessary Libraries
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

"""#Load Dataset"""

data=pd.read_csv("/content/Heart Disease.csv")

"""#Print The Data"""

data

"""#Analyzing the Head and Tail of Patient Data"""

data.head()

data.tail()

"""#Exploring Patient Data Dimensions"""

data.shape

"""#Descriptive Analysis of Patient Data"""

data.info()

data.describe()

data["target"].value_counts()

"""# Split data into features (X) and target variable (y)"""

x=data.drop("target",axis=1)
y=data["target"]

print(x)
print(y)

"""# Split data into training and testing sets"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""# Initialize Logistic Regression model"""

model=LogisticRegression()

"""# Train the model"""

model.fit(x_train,y_train)

model.fit(x_test,y_test)

"""# Predict on the testing set"""

x_predict=model.predict(x_train)
x_accuracy=accuracy_score(x_predict,y_train)

y_predict=model.predict(x_test)
y_accuracy=accuracy_score(y_predict,y_test)

"""#Evaluate The Model"""

print(x_accuracy)
print(y_accuracy)

print(classification_report(y_test, y_predict))

"""#Check The Performance Of Model With New Data"""

# new customer
input_data=(63,1,3,145,233,1,0,150,0,2.3,0,0,1)
input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
  print("The person doesn't have heart disease")
else:
  print("Person have heart disease")

"""# Initialize Decision Tree classifier"""

#decision tree
model1=DecisionTreeClassifier()

"""# Train the model"""

model1.fit(x_train,y_train)

model1.fit(x_test,y_test)

"""# Predict On The Testing Set"""

x1_predict=model1.predict(x_train)
x1_accuracy=accuracy_score(x1_predict,y_train)

y1_predict=model1.predict(x_test)
y1_accuracy=accuracy_score(y1_predict,y_test)

"""#Evaluate the model"""

x1_accuracy

y1_accuracy

from sklearn import tree

tree.plot_tree(model1)

"""#Initialize Random Forest Classifier"""

#randomforestclassifier
model2=RandomForestClassifier()

"""# Train The Model"""

model2.fit(x_train,y_train)

model2.fit(x_test,y_test)

"""#Predict On Testing Set"""

x2_predict=model2.predict(x_train)
x2_accuracy=accuracy_score(x2_predict,y_train)

y2_predict=model2.predict(x_test)
x2_accuracy=accuracy_score(y2_predict,y_test)

"""#Evaluate The Model"""

x_accuracy

y_accuracy